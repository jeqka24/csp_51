# Generated by Django 2.1 on 2018-08-27 16:53

from django.db import migrations, models
import django.db.models.deletion
import sport_reserve.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Name', models.TextField(verbose_name='Название мероприятия')),
                ('Stage', models.TextField(blank=True, null=True, verbose_name='Этап соревнований')),
                ('DateStart', models.DateField(verbose_name='Дата начала мероприятия')),
                ('DateEnd', models.DateField(verbose_name='Дата окончания мероприятия')),
                ('EKP', models.TextField(blank=True, null=True, verbose_name='№ ЕКП')),
                ('FactCost', models.FloatField(blank=True, null=True, verbose_name='Фактические расходы')),
            ],
            options={
                'verbose_name': 'Мерприятие',
                'verbose_name_plural': 'Мероприятия',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Name', models.TextField(help_text='Тренировочные, Всероссийские, Международные', verbose_name='Вид мероприятия')),
            ],
            options={
                'verbose_name': 'Вид мерприятия',
                'verbose_name_plural': 'Виды мероприятий',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Name', models.TextField(verbose_name='Название группы')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'ordering': ['Name'],
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Country', models.TextField(help_text='Страна проведения мероприятия или соревнования', verbose_name='Страна')),
                ('Region', models.TextField(blank=True, help_text='Регион, область, республика, провинция...', null=True, verbose_name='Область')),
                ('City', models.TextField(help_text='Населенный пункт (город)', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Место',
                'verbose_name_plural': 'Места',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Date', models.DateField(verbose_name='Дата результата')),
                ('Place', models.IntegerField(verbose_name='Занятое место')),
                ('PlaceComment', models.TextField(blank=True, null=True, verbose_name='Занятое место (комментарии)')),
                ('Competitors', models.IntegerField(verbose_name='Количество участников')),
                ('Event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Event', verbose_name='Соревнование')),
                ('Group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Group', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Результат',
                'verbose_name_plural': 'Результаты',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Name', models.TextField(verbose_name='Название вида спорта')),
                ('Priority', models.BooleanField(verbose_name='Приоритетный вид спорта')),
                ('Olympic', models.BooleanField(verbose_name='Олимпийский вид спорта')),
            ],
            options={
                'verbose_name': 'Вид спорта',
                'verbose_name_plural': 'Виды спорта',
                'ordering': ['Name'],
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='SportKind',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('Name', models.TextField(verbose_name='Тип спорта')),
            ],
            options={
                'verbose_name': 'Тип спорта',
                'verbose_name_plural': 'Типы спорта',
                'ordering': ['Name'],
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Sportsman',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('FIO', models.TextField(help_text='ФИО спортсмена', verbose_name='Фамилия, Имя, Отчество')),
                ('Photo', models.ImageField(blank=True, help_text='Фото спортсмена', null=True, upload_to=sport_reserve.models.get_photo_path, verbose_name='Фото')),
                ('Birthday', models.DateField(blank=True, help_text='День рождения', null=True, verbose_name='День рождения')),
                ('Degree', models.TextField(blank=True, help_text='Разряд или звание, присвоенные спорстмену', null=True, verbose_name='Разряд/звание')),
                ('AssignmentDate', models.DateField(blank=True, null=True, verbose_name='Срок окончания трудового договора')),
                ('ParallelDate', models.DateField(blank=True, null=True, verbose_name='Срок окончания параллельного зачета')),
                ('Organisation', models.TextField(blank=True, help_text='Физкультурно-спортивная организация', null=True, verbose_name='ФСО')),
            ],
            options={
                'verbose_name': 'Спортсмен',
                'verbose_name_plural': 'Спортсмены',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sport_reserve.BaseModel')),
                ('FIO', models.TextField(help_text='ФИО тренера', verbose_name='Фамилия, Имя, Отчество')),
                ('Phone1', models.TextField(blank=True, null=True, verbose_name='Рабочий телефон')),
                ('Phone2', models.TextField(blank=True, null=True, verbose_name='Мобильный телефон')),
                ('Email', models.TextField(blank=True, null=True, verbose_name='e-mail')),
                ('Sport', models.ForeignKey(help_text='Вид спорта, которым тренер занимается в данный момент', on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Sport', verbose_name='Вид спорта')),
            ],
            options={
                'verbose_name': 'Тренер',
                'verbose_name_plural': 'Тренеры',
            },
            bases=('sport_reserve.basemodel',),
        ),
        migrations.AddField(
            model_name='sportsman',
            name='PersonalTrainer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Trainer', verbose_name='Текущий тренер'),
        ),
        migrations.AddField(
            model_name='sportsman',
            name='Sport',
            field=models.ForeignKey(help_text='Вид спорта, которым занимается спортсмен', on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Sport', verbose_name='Вид спорта'),
        ),
        migrations.AddField(
            model_name='sport',
            name='Kind',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.SportKind', verbose_name='Тип спорта'),
        ),
        migrations.AddField(
            model_name='result',
            name='Sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Sport'),
        ),
        migrations.AddField(
            model_name='result',
            name='Sportsman',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Sportsman', verbose_name='Спортсмен'),
        ),
        migrations.AddField(
            model_name='event',
            name='Groups',
            field=models.ManyToManyField(help_text='Группы', to='sport_reserve.Group'),
        ),
        migrations.AddField(
            model_name='event',
            name='Place',
            field=models.ForeignKey(help_text='Место проведения мероприятия или соревнования', on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Place'),
        ),
        migrations.AddField(
            model_name='event',
            name='Sport',
            field=models.ForeignKey(help_text='Вид спорта', on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.Sport'),
        ),
        migrations.AddField(
            model_name='event',
            name='Type',
            field=models.ForeignKey(help_text='Тренировочные, Всероссийские, Международные', on_delete=django.db.models.deletion.PROTECT, to='sport_reserve.EventType'),
        ),
    ]
